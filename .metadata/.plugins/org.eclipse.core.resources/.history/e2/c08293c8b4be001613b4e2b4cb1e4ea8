function ContextMenu() {
	var contextMenuClassName = "context-menu";
	var contextMenuItemClassName = "context-menu__item";
	var contextMenuLinkClassName = "context-menu__link";
	var contextMenuActive = "context-menu--active";

	var taskItemClassName = "task";
	var taskItemInContext;

	var clickCoords;
	var clickCoordsX;
	var clickCoordsY;

	var menuState = 0;
	var menuWidth;
	var menuHeight;
	var menuPosition;
	var menuPositionX;
	var menuPositionY;

	var windowWidth;
	var windowHeight;
}

/*
 * [{name: " ", handler: function}] <nav id="context-menu" class="context-menu">
 * <ul class="context-menu__items"> <li class="context-menu__item"> <a href="#"
 * class="context-menu__link" data-action="View"><i class="fa fa-eye"></i>
 * View Task</a> </li> <li class="context-menu__item"> <a href="#"
 * class="context-menu__link" data-action="Edit"><i class="fa fa-edit"></i>
 * Edit Task</a> </li> <li class="context-menu__item"> <a href="#"
 * class="context-menu__link" data-action="Delete"><i class="fa fa-times"></i>
 * Delete Task</a> </li> </ul> </nav>
 * 
 * 
 */

ContextMenu.prototype.init = function(tartgetNode, menuItems) {
	this.menu = Dom.newDOMElement({
		_name : "nav",
		class : "context-menu"
	});

	this.menuItems = Dom.newDOMElement({
		_name : "ul",
		class : "context-menu__items"
	});
	
	for (var i = 0; i < menuItems.length; i++) {
		var item = menuItems[i];
		if (item == null)
			continue;
		var text = item.name;
		var liNode = Dom.newDOMElement({
			_name : "li",
			_text : text,
			class : "context-menu__item"
		});
		liNode.addEventListener("click", function() {
			console.log(item.name);
			if (item.handler != null)
				item.hander();
		}, false);
		this.menuItems.appendChild(liNode);
	}
	this.menu.appendChild(this.menuItems);
	
	this.contextListener(tartgetNode);
	

}

ContextMenu.prototype.getMenu = function() {
	return this.menu;
}

ContextMenu.prototype.clickInsideElement = function(e, className) {
	var el = e.srcElement || e.target;

	if (el.classList.contains(className)) {
		return el;
	} else {
		while (el = el.parentNode) {
			if (el.classList && el.classList.contains(className)) {
				return el;
			}
		}
	}

	return false;
}

ContextMenu.prototype.contextListener = function(targetNode) {
	var thiz = this;
	targetNode.addEventListener("contextmenu", function(e) {
		thiz.taskItemInContext = thiz.clickInsideElement(e, thiz.taskItemClassName);
		if (thiz.taskItemInContext) {
			e.preventDefault();
			thiz.toggleMenuOn();
			thiz.positionMenu(e);
		} else {
			thiz.taskItemInContext = null;
			thiz.toggleMenuOff();
		}
	});
}

ContextMenu.prototype.toggleMenuOn = function() {
	if (this.menuState !== 1) {
		this.menuState = 1;
		this.menu.classList.add(this.contextMenuActive);
	}
}

/**
 * Turns the custom context menu off.
 */
ContextMenu.prototype.toggleMenuOff = function() {
	if (this.menuState !== 0) {
		this.menuState = 0;
		this.menu.classList.remove(this.contextMenuActive);
	}
}

ContextMenu.prototype.positionMenu = function(e) {
	clickCoords = this.getPosition(e);
	clickCoordsX = clickCoords.x;
	clickCoordsY = clickCoords.y;

	menuWidth = menu.offsetWidth + 4;
	menuHeight = menu.offsetHeight + 4;

	windowWidth = window.innerWidth;
	windowHeight = window.innerHeight;

	if ((windowWidth - clickCoordsX) < menuWidth) {
		menu.style.left = windowWidth - menuWidth + "px";
	} else {
		menu.style.left = clickCoordsX + "px";
	}

	if ((windowHeight - clickCoordsY) < menuHeight) {
		menu.style.top = windowHeight - menuHeight + "px";
	} else {
		menu.style.top = clickCoordsY + "px";
	}
}

ContextMenu.prototype.getPosition = function(e) {
    var posx = 0;
    var posy = 0;

    if (!e) var e = window.event;
    
    if (e.pageX || e.pageY) {
      posx = e.pageX;
      posy = e.pageY;
    } else if (e.clientX || e.clientY) {
      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }

    return {
      x: posx,
      y: posy
    }
  }

"use strict";

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//
// H E L P E R F U N C T I O N S
//
// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////

/**
 * Function to check if we clicked inside an element with a particular class
 * name.
 * 
 * @param {Object}
 *            e The event
 * @param {String}
 *            className The class name to check against
 * @return {Boolean}
 */


/**
 * Get's exact position of event.
 * 
 * @param {Object}
 *            e The event passed in
 * @return {Object} Returns the x and y position
 */

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//
// C O R E F U N C T I O N S
//
// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
 * Variables.
 */

/**
 * Initialise our application's code.
 */
function init() {

}

/**
 * Listens for contextmenu events.
 */
// function contextListener() {
// document.addEventListener( "contextmenu", function(e) {
// taskItemInContext = clickInsideElement( e, taskItemClassName );
//
// if ( taskItemInContext ) {
// e.preventDefault();
// toggleMenuOn();
// positionMenu(e);
// } else {
// taskItemInContext = null;
// toggleMenuOff();
// }
// });
// }
/**
 * Listens for click events.
 */
// function clickListener() {
// document.addEventListener( "click", function(e) {
// var clickeElIsLink = clickInsideElement( e, contextMenuLinkClassName );
//
// if ( clickeElIsLink ) {
// e.preventDefault();
// menuItemListener( clickeElIsLink );
// } else {
// var button = e.which || e.button;
// if ( button === 1 ) {
// toggleMenuOff();
// }
// }
// });
// }
/**
 * Listens for keyup events.
 */
// function keyupListener() {
// window.onkeyup = function(e) {
// if ( e.keyCode === 27 ) {
// toggleMenuOff();
// }
// }
// }
/**
 * Window resize event listener
 */
// function resizeListener() {
// window.onresize = function(e) {
// toggleMenuOff();
// };
// }
/**
 * Turns the custom context menu on.
 */


/**
 * Positions the menu properly.
 * 
 * @param {Object}
 *            e The event
 */


/**
 * Dummy action function that logs an action when a menu item link is clicked
 * 
 * @param {HTMLElement}
 *            link The link that was clicked
 */
function menuItemListener(link) {
	console.log("Task ID - " + taskItemInContext.getAttribute("data-id")
			+ ", Task action - " + link.getAttribute("data-action"));
	toggleMenuOff();
}

/**
 * Run the app.
 */
//init();
