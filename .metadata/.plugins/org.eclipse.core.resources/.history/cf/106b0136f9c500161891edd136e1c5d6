function ComboPopup() {
	this.contextMenuClassName = "context-menu";
	this.contextMenuItemClassName = "context-menu__item";
	this.contextMenuLinkClassName = "context-menu__link";
	this.contextMenuActive = "context-menu--active";

	this.taskItemClassName = "task";
	this.taskItemInContext;

	this.clickCoords;
	this.clickCoordsX;
	this.clickCoordsY;

	this.menu;
	this.menuItems;
	this.menuState = 0;
	this.menuWidth;
	this.menuHeight;
	this.menuPosition;
	this.menuPositionX;
	this.menuPositionY;

	this.windowWidth;
	this.windowHeight;
	this.flag = false;
	
	this.handleItem;
	this.targetNode;
	
//	this.body = document.getElementById("main-container");
	this.actions={};
}

/*
 * [{name: " ", handler: function}] <nav id="context-menu" class="context-menu">
 * <ul class="context-menu__items"> <li class="context-menu__item"> <a href="#"
 * class="context-menu__link" data-action="View"><i class="fa fa-eye"></i>
 * View Task</a> </li> <li class="context-menu__item"> <a href="#"
 * class="context-menu__link" data-action="Edit"><i class="fa fa-edit"></i>
 * Edit Task</a> </li> <li class="context-menu__item"> <a href="#"
 * class="context-menu__link" data-action="Delete"><i class="fa fa-times"></i>
 * Delete Task</a> </li> </ul> </nav>
 * 
 * 
 */

ComboPopup.prototype.init = function(menuItems) {
	this.menu = Dom.newDOMElement({
		_name : "nav",
		class : "context-menu"
	});
	if (menuItems == null) return;
	this.menuItems = Dom.newDOMElement({
		_name : "ul",
		class : "context-menu__items"
	});
	var thiz = this;
	for (var i = 0; i < menuItems.length; i++) {
		var item = menuItems[i];
		if (item == null)
			continue;
		var text = item.name;
		var liNode = Dom.newDOMElement({
			_name : "li",
			_text : text,
			class : "context-menu__item"
		});
		
		if (item.handler != null) liNode.action = item.handler;
		if (item.express != null) liNode.express = item.express;
		this.menuItems.appendChild(liNode);
	}
	this.menu.appendChild(this.menuItems);
	
	this.menuItems.addEventListener("click", function(ev){
		if (ev.target.action != null) ev.target.action(thiz.handleItem);
	}, false);
	
	
	document.addEventListener("click", function(e) {
		if (thiz.flag && e.button == 0) {
			thiz.flag = false;
			thiz.toggleMenuOff();
		}
		
	}, true);
	this.renderItems();
}

ComboPopup.prototype.renderItems = function() {
	for(var i = 0; i < this.menuItems.children.length; i++) {
		var li = this.menuItems.children[i];
		if (li.express != null) {
			var check = li.express();
			if  (check) {
				li.style.display = "none";
			} else {
				li.style.display = "block";
			}
		}
	}
}

ComboPopup.prototype.getMenu = function() {
	return this.menu;
}

ComboPopup.prototype.toggleMenuOn = function(targetNode) {
	this.positionMenu(targetNode);
//	this.renderItems();
	document.body.appendChild(this.menu);
//	this.handleItem = e.dataNode;
	this.flag = true;
	
}

ComboPopup.prototype.toggleMenuOff = function() {
	document.body.removeChild(this.menu);
}

ComboPopup.prototype.positionMenu = function(targetNode){
	var menu = this.menu;
	
	menu.style.width = targetNode.offsetWidth + "px";
	menu.style.height = "100px";
	menu.style.left = targetNode.offsetLeft + "px";
	menu.style.top = targetNode.offsetTop - 100 + "px";
	
}

